"use client";

import { useEffect, useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import api from "@/lib/axios";
import { toast } from "sonner";
import { Track, useTrack } from "@/context/TrackContext";

export default function AdminTracksPage() {
  const [trackingNumber, setTrackingNumber] = useState("");
  const [status, setStatus] = useState("–≠—Ä—ç—ç–Ω –∞–≥—É—É–ª–∞—Ö");
  const [submitting, setSubmitting] = useState(false); // ‚úÖ fixed local loading
  const { allTracks, fetchAllTracks } = useTrack();

  useEffect(() => {
    fetchAllTracks();
  }, []);

  const handleScan = async () => {
    if (!trackingNumber.trim()) {
      toast.error("Track code –æ—Ä—É—É–ª–Ω–∞ —É—É!");
      return;
    }

    try {
      setSubmitting(true);
      const loadingToast = toast.loading("Track —à–∞–ª–≥–∞–∂ –±–∞–π–Ω–∞...");

      const res = await api.post("/track/admin-scan", {
        trackingNumber,
        status,
      });

      toast.dismiss(loadingToast);
      toast.success(res.data.message || "–ê–º–∂–∏–ª—Ç—Ç–∞–π —à–∏–Ω—ç—á–ª—ç–≥–¥–ª—ç—ç!");

      setTrackingNumber("");
      await fetchAllTracks(); // ‚úÖ refresh the tracks list
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
    } catch (err: any) {
      console.error("‚ùå Admin scan error:", err);
      toast.error(err.response?.data?.message || "Scan —Ö–∏–π—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞!");
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <div className="p-6 space-y-6">
      {/* === SCAN / CREATE / UPDATE SECTION === */}
      <Card>
        <CardHeader>
          <CardTitle>Track Scan (–ê–¥–º–∏–Ω)</CardTitle>
        </CardHeader>
        <CardContent className="flex flex-col sm:flex-row gap-3">
          <Input
            placeholder="Track code"
            value={trackingNumber}
            onChange={(e) => setTrackingNumber(e.target.value)}
          />
          <select
            className="border rounded-md p-2 w-full sm:w-48"
            value={status}
            onChange={(e) => setStatus(e.target.value)}
          >
            <option value="–≠—Ä—ç—ç–Ω –∞–≥—É—É–ª–∞—Ö">–≠—Ä—ç—ç–Ω –∞–≥—É—É–ª–∞—Ö</option>
            <option value="–ó–∞–º—ã–Ω-“Æ“Ø–¥">–ó–∞–º—ã–Ω-“Æ“Ø–¥</option>
            <option value="–°–∞–ª–±–∞—Ä —Ö—É–≤–∏–∞—Ä–ª–∞–≥–¥—Å–∞–Ω">–°–∞–ª–±–∞—Ä —Ö—É–≤–∏–∞—Ä–ª–∞–≥–¥—Å–∞–Ω</option>
            <option value="–°–∞–ª–±–∞—Ä –¥—ç—ç—Ä">–°–∞–ª–±–∞—Ä –¥—ç—ç—Ä</option>
            <option value="–•“Ø—Ä–≥—ç–ª—Ç—ç–Ω–¥ –≥–∞—Ä—Å–∞–Ω">–•“Ø—Ä–≥—ç–ª—Ç—ç–Ω–¥ –≥–∞—Ä—Å–∞–Ω</option>
            <option value="–•“Ø—Ä–≥—ç–≥–¥—Å—ç–Ω">–•“Ø—Ä–≥—ç–≥–¥—Å—ç–Ω</option>
            <option value="–°–∞–∞—Ç—Å–∞–Ω">–°–∞–∞—Ç—Å–∞–Ω</option>
          </select>

          <Button onClick={handleScan} disabled={submitting}>
            {submitting ? "–®–∏–Ω—ç—á–∏–ª–∂ –±–∞–π–Ω–∞..." : "Scan / Update"}
          </Button>
        </CardContent>
      </Card>

      {/* === TRACKS LIST === */}
      <div className="grid sm:grid-cols-2 lg:grid-cols-3 gap-4">
        {allTracks.length === 0 ? (
          <p className="text-gray-500 text-center col-span-full">
            Track –º—ç–¥—ç—ç–ª—ç–ª –∞–ª–≥–∞ –±–∞–π–Ω–∞.
          </p>
        ) : (
          allTracks.map((t: Track) => (
            <Card key={t._id} className="hover:shadow-lg transition">
              <CardHeader>
                <CardTitle className="text-base font-semibold">
                  {t.trackingNumber}
                </CardTitle>
              </CardHeader>
              <CardContent className="text-sm space-y-1 text-gray-600">
                <p>üìç –ë–∞–π—Ä—à–∏–ª: {t.location}</p>
                <p>üöö –¢”©–ª”©–≤: {t.status}</p>
                <p>üë§ –•—ç—Ä—ç–≥–ª—ç–≥—á: {t.user?.name || "‚Äî"}</p>
                <p className="text-xs text-gray-400">
                  ‚è± {new Date(t.updatedAt).toLocaleString()}
                </p>
              </CardContent>
            </Card>
          ))
        )}
      </div>
    </div>
  );
}
